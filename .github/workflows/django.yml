name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      BACKEND_API: ${{ secrets.BACKEND_API }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_USER: ${{ secrets.DB_USER }}
      DJANGO_ENV: ${{ secrets.DJANGO_ENV }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      FRONTEND_API: ${{ secrets.FRONTEND_API }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
      NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
      NEXT_PUBLIC_FRONTEND_API: ${{ secrets.NEXT_PUBLIC_FRONTEND_API }}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm install
        npm audit fix
    - name: Install Backend Dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Install Browser Dependencies (Chromium, ChromeDriver, XVFB, and Libraries)
      run: |
        sudo apt-get update
        # install utilities and Xvfb
        sudo apt-get install -y jq xvfb
        # install common Chrome libs
        sudo apt-get install -y libnss3 libxi6 libxcursor1 libxcomposite1 libxrandr2 \
                                libatk1.0-0 libatk-bridge2.0-0 libcups2

        # 1) get the Chromium version apt would install
        APT_CHROME_FULL=$(apt-cache policy chromium-browser \
          | awk '/Candidate:/ {print $2}')
        APT_CHROME_VER=$(echo "$APT_CHROME_FULL" \
          | grep -oP '\d+\.\d+\.\d+\.\d+')
        echo "apt Chromium version: $APT_CHROME_VER"

        # 2) fetch the latest ChromeDriver version
        JSON_URL="https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json"
        DRIVER_VER=$(curl -s $JSON_URL \
          | jq -r '.channels.Stable.version')
        echo "latest ChromeDriver version: $DRIVER_VER"

        # 3) pick the smaller of the two
        MIN_VER=$(printf '%s\n%s\n' "$APT_CHROME_VER" "$DRIVER_VER" \
          | sort -V | head -n1)
        echo "using version: $MIN_VER"

        if [ "$MIN_VER" = "$APT_CHROME_VER" ]; then
          # install chromium + matching driver from apt
          sudo apt-get install -y \
            chromium-browser=$APT_CHROME_FULL \
            chromium-chromedriver=$APT_CHROME_FULL
        else
          # download both Chrome and ChromeDriver from the JSON URLs
          CHROME_URL=$(curl -s $JSON_URL \
            | jq -r '.channels.Stable.downloads.chrome[]
                      | select(.platform=="linux64").url')
          DRIVER_URL=$(curl -s $JSON_URL \
            | jq -r '.channels.Stable.downloads.chromedriver[]
                      | select(.platform=="linux64").url')

          echo "Downloading Chrome from $CHROME_URL"
          wget -q $CHROME_URL -O /tmp/chrome-linux64.zip
          echo "Downloading ChromeDriver from $DRIVER_URL"
          wget -q $DRIVER_URL -O /tmp/chromedriver-linux64.zip

          # unpack & install
          unzip -q /tmp/chrome-linux64.zip -d /tmp/chrome
          sudo mv /tmp/chrome/*/chrome /usr/bin/chrome

          unzip -q /tmp/chromedriver-linux64.zip -d /tmp/chromedriver
          sudo mv /tmp/chromedriver/linux64/chromedriver /usr/bin/chromedriver

          sudo chmod +x /usr/bin/{chrome,chromedriver}
        fi

    - name: Configure AWS Profile for s3
      run: |
        mkdir -p ~/.aws
        # Create the credentials file with default credentials
        echo "[default]" > ~/.aws/credentials
        echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
        echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
        # Create the config file with the role configuration
        echo "[profile ${{ secrets.AWS_PROFILE }}]" > ~/.aws/config
        echo "role_arn = arn:aws:iam::314146328946:role/${{ secrets.AWS_PROFILE }}" >> ~/.aws/config
        echo "source_profile = default" >> ~/.aws/config
        echo "region = ${{ secrets.AWS_REGION }}" >> ~/.aws/config
        echo "output = json" >> ~/.aws/config
    - name: Run Frontend Tests
      run: |
        docker compose up -d
        cd frontend
        npm run test
    - name: Run Backend Tests
      run: |
        docker compose up -d
        cd backend
        python manage.py migrate
        pytest
    - name: Run Behave Tests
      run: |
        # Behave needs the frontend and backend running in background to test.
        (cd frontend && npm run dev &)
        
        (cd backend && sudo systemctl start postgresql && python3 manage.py runserver &)
        export CHROME_OPTIONS="--headless --no-sandbox --disable-dev-shm-usage --remote-debugging-port=9222"
        echo "Waiting for servers to be fully up..."
        sleep 15
        (cd backend && xvfb-run behave test/features)
