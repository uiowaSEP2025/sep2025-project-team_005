name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      DJANGO_ENV: ${{ secrets.DJANGO_ENV }}
      SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_PROFILE: ${{ secrets.AWS_PROFILE }}

      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      
      NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
      NEXT_PUBLIC_FRONTEND_API: ${{ secrets.NEXT_PUBLIC_FRONTEND_API }}
      NEXT_PUBLIC_BACKEND_API: ${{ secrets.NEXT_PUBLIC_BACKEND_API }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install
          npm audit fix
      - name: Install Backend Dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install Browser Dependencies (Chromium, ChromeDriver, XVFB, and Libraries)
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver jq xvfb
          sudo apt-get install -y libnss3 libxi6 libxcursor1 libxcomposite1 libxrandr2 libatk1.0-0 libatk-bridge2.0-0 libcups2
          CHROMIUM_CANDIDATE=$(apt-cache policy chromium-browser | awk '/Candidate:/ {print $2}')
          LKG_JSON=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json)
          CHROMEDRIVER_CHANNEL=$(echo "$LKG_JSON" \
            | jq -r '.channels.Stable.version')
          echo "Chromium candidate version: $CHROMIUM_CANDIDATE"
          echo "Chromedriver latest stable version: $CHROMEDRIVER_CHANNEL"
  
          MIN_VERSION=$(printf "%s\n%s" \
            "$CHROMIUM_CANDIDATE" "$CHROMEDRIVER_CHANNEL" \
            | sort -V | head -n1)
          echo "Using pinned version: $MIN_VERSION"
  
          # 4) Install exactly that Chromium version
          sudo apt-get install -y chromium-browser=$MIN_VERSION
  
          # 5) Download the matching Chromedriver binary from the JSONâ€™s versions list
          DRIVER_URL=$(jq -r --arg v "$MIN_VERSION" \
            '.versions[]
            | select(.version==$v)
            | .downloads.chromedriver[]
            | select(.platform=="linux64")
            | .url' <<<"$LKG_JSON")
  
          echo "Downloading Chromedriver from: $DRIVER_URL"
  
          # Download and install ChromeDriver
          wget -q $DRIVER_URL -O /tmp/chromedriver.zip
          unzip -q /tmp/chromedriver.zip -d /tmp/chromedriver
          sudo mv /tmp/chromedriver/chromedriver-linux64/chromedriver /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver
    - name: Configure AWS Profile for s3
      run: |
        mkdir -p ~/.aws
        # Create the credentials file with default credentials
        echo "[default]" > ~/.aws/credentials
        echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
        echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
        # Create the config file with the role configuration
        echo "[profile ${{ secrets.AWS_PROFILE }}]" > ~/.aws/config
        echo "role_arn = arn:aws:iam::314146328946:role/${{ secrets.AWS_PROFILE }}" >> ~/.aws/config
        echo "source_profile = default" >> ~/.aws/config
        echo "region = ${{ secrets.AWS_REGION }}" >> ~/.aws/config
        echo "output = json" >> ~/.aws/config
    - name: Run Frontend Tests
      run: |
        docker compose up -d
        cd frontend
        npm run test
    - name: Run Backend Tests
      run: |
        docker compose up -d
        cd backend
        pytest
    - name: Run Behave Tests
      run: |
        # Behave needs the frontend and backend running in background to test.
        (cd frontend && npm run dev &)
        
        (cd backend && sudo systemctl start postgresql && python3 manage.py runserver &)

        export CHROME_OPTIONS="--headless --no-sandbox --disable-dev-shm-usage --remote-debugging-port=9222"

        echo "Waiting for servers to be fully up..."
        sleep 15
        (cd backend && xvfb-run behave test/features)
